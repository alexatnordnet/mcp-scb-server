/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetNavigationRootQueryParams,
  GetNavigationRoot200,
  GetNavigationRoot400,
  GetNavigationRoot404,
  GetNavigationRoot429,
  GetNavigationRootQueryResponse,
} from '../../types/navigationController/GetNavigationRoot.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getNavigationRootQueryParamsSchema = z
  .object({
    lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  })
  .optional() as unknown as ToZod<GetNavigationRootQueryParams>

/**
 * @description Success
 */
export const getNavigationRoot200Schema = z
  .object({
    language: z.string().describe('The language code (ISO 639) for this response'),
    id: z.string().nullable(),
    label: z.string().describe('Display text').nullable(),
    description: z.string().describe('Longer text describing node.').nullable().nullish(),
    tags: z.array(z.string().describe('tag for folder')).optional(),
    folderContents: z
      .array(
        z
          .object({
            type: z.enum(['Heading', 'FolderInformation', 'Table']).describe('One of Heading, Table or FolderInformation'),
            id: z.string(),
            label: z.string().describe('Display text').nullable(),
            description: z.string().describe('Longer text describing node.').nullable().nullish(),
            sortCode: z.string().describe('String for sorting the contents in folder').optional(),
          })
          .describe('Navigation item.'),
      )
      .nullable(),
    links: z
      .array(
        z.object({
          rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
          hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
          href: z.string().describe('the link to the resource'),
        }),
      )
      .describe('Links to ...')
      .nullable(),
  })
  .describe('Folder item') as unknown as ToZod<GetNavigationRoot200>

/**
 * @description Error response for 400
 */
export const getNavigationRoot400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetNavigationRoot400>

/**
 * @description Error response for 404
 */
export const getNavigationRoot404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetNavigationRoot404>

/**
 * @description Error response for 429
 */
export const getNavigationRoot429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetNavigationRoot429>

export const getNavigationRootQueryResponseSchema = z.lazy(() => getNavigationRoot200Schema) as unknown as ToZod<GetNavigationRootQueryResponse>