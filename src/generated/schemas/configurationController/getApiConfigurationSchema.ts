/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetApiConfiguration200,
  GetApiConfiguration400,
  GetApiConfiguration404,
  GetApiConfiguration429,
  GetApiConfigurationQueryResponse,
} from '../../types/configurationController/GetApiConfiguration.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

/**
 * @description Success
 */
export const getApiConfiguration200Schema = z
  .object({
    apiVersion: z.string().describe('The version of the API spesification'),
    appVersion: z.string().describe('The version of the API implementation'),
    languages: z
      .array(
        z
          .object({
            id: z.string().describe('The language ISO code'),
            label: z.string().describe('The name of the language'),
          })
          .describe('Language information'),
      )
      .describe('A list of language that exists for the data.'),
    defaultLanguage: z.string().describe('The id of the language that is the default language.'),
    maxDataCells: z.number().int().min(0).describe('A threshold of how many datacells that can be fetched in a single API call'),
    maxCallsPerTimeWindow: z.number().int().min(1).describe('The maximum number of call to the API for a time window indicated by timeWindow.'),
    timeWindow: z.number().int().min(1).describe('The time window restricting how many call that can be done.'),
    license: z.string().describe('The license that the data is provided.'),
    sourceReferences: z
      .array(
        z
          .object({
            language: z.string().describe('The language id'),
            text: z.string().describe('The text that should be displayed'),
          })
          .describe('How data should be cite for a specific language'),
      )
      .describe('A list of how the data should be cite for diffrent languages.')
      .optional(),
    defaultDataFormat: z.string().describe('The default data format to used when no format is specified in the request.'),
    dataFormats: z.array(z.string()).describe('List of available data formts for fetching data in.'),
    features: z
      .array(
        z.object({
          id: z.string().describe('The identifyer for the feature'),
          params: z
            .array(
              z.object({
                key: z.string().describe('The key'),
                value: z.string().describe('The value associated with the key'),
              }),
            )
            .optional(),
        }),
      )
      .describe('A list of features for the API')
      .optional(),
  })
  .describe('API configuration') as unknown as ToZod<GetApiConfiguration200>

/**
 * @description Error response for 400
 */
export const getApiConfiguration400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetApiConfiguration400>

/**
 * @description Error response for 404
 */
export const getApiConfiguration404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetApiConfiguration404>

/**
 * @description Error response for 429
 */
export const getApiConfiguration429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetApiConfiguration429>

export const getApiConfigurationQueryResponseSchema = z.lazy(() => getApiConfiguration200Schema) as unknown as ToZod<GetApiConfigurationQueryResponse>