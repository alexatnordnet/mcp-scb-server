/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ExtensionDimension } from '../types/ExtensionDimension.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

/**
 * @description extension at dimension
 */
export const extensionDimensionSchema = z
  .object({
    elimination: z.boolean().describe('Can dimension be elminated').optional(),
    eliminationValueCode: z.string().describe('Elimination value code').optional(),
    noteMandatory: z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.').optional(),
    categoryNoteMandatory: z
      .object({})
      .catchall(z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.'))
      .describe('Describes which value note are mandatory')
      .optional(),
    refperiod: z.object({}).catchall(z.string()).describe('Text with information on the exact period for the statistics').optional(),
    show: z.string().describe('Information about how variables are presented').optional(),
    codeLists: z
      .array(
        z.object({
          id: z.string().describe('The identity of the CodeList'),
          label: z.string().describe('A textual name for the CodeList'),
          type: z.enum(['Aggregation', 'Valueset']).describe('Type of codelist'),
          links: z
            .array(
              z.object({
                rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
                hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
                href: z.string().describe('the link to the resource'),
              }),
            )
            .describe('Links to associated information about the code list'),
        }),
      )
      .describe('Available codelists for this dimension')
      .optional(),
    measuringType: z
      .object({})
      .catchall(z.enum(['Stock', 'Flow', 'Average', 'Other']).default('Other').describe('Indicates if data is stock, flow or average.'))
      .describe('Indicates if data is stock, flow or average.')
      .optional(),
    priceType: z
      .object({})
      .catchall(z.enum(['NotApplicable', 'Current', 'Fixed']).describe('Indicates if data is in current or fixed prices.'))
      .describe('Indicates if data is in current or fixed prices.')
      .optional(),
    adjustment: z
      .object({})
      .catchall(
        z
          .enum(['None', 'SesOnly', 'WorkOnly', 'WorkAndSes'])
          .default('None')
          .describe(
            'WorkOnly means that data is adjusted e.g. to take into account the number of working days. SesOnly means that data is seasonally adjusted.',
          ),
      )
      .describe('Describes adjustments made to the data')
      .optional(),
    basePeriod: z
      .object({})
      .catchall(
        z
          .string()
          .describe(
            'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
          ),
      )
      .describe(
        'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
      )
      .optional(),
  })
  .describe('extension at dimension') as unknown as ToZod<ExtensionDimension>