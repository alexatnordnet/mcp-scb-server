/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { Dimension } from '../types/Dimension.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

/**
 * @description Specification on json-stat.org -> [here](https://json-stat.org/full/#dimension)
 */
export const dimensionSchema = z
  .object({})
  .catchall(
    z.object({
      label: z.string().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#label)').optional(),
      note: z.array(z.string()).describe('Notes for variable').optional(),
      category: z
        .object({
          index: z.object({}).catchall(z.number().int()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#index)').optional(),
          label: z.object({}).catchall(z.string()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#label)').optional(),
          note: z
            .object({})
            .catchall(z.array(z.string()).describe('Spesification on json-stat.org -> [here](https://json-stat.org/full/#note)'))
            .describe('Notes for values')
            .optional(),
          child: z
            .object({})
            .catchall(z.array(z.string()).refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' }))
            .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#child)')
            .optional(),
          unit: z
            .object({})
            .catchall(
              z.object({
                base: z.string().describe('It is the base unit (person, gram, euro, etc.).').optional(),
                decimals: z.number().int().describe('Number of decimals').optional(),
              }),
            )
            .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#unit)')
            .optional(),
        })
        .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#category)')
        .optional(),
      extension: z
        .object({
          elimination: z.boolean().describe('Can dimension be elminated').optional(),
          eliminationValueCode: z.string().describe('Elimination value code').optional(),
          noteMandatory: z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.').optional(),
          categoryNoteMandatory: z
            .object({})
            .catchall(z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.'))
            .describe('Describes which value note are mandatory')
            .optional(),
          refperiod: z.object({}).catchall(z.string()).describe('Text with information on the exact period for the statistics').optional(),
          show: z.string().describe('Information about how variables are presented').optional(),
          codeLists: z
            .array(
              z.object({
                id: z.string().describe('The identity of the CodeList'),
                label: z.string().describe('A textual name for the CodeList'),
                type: z.enum(['Aggregation', 'Valueset']).describe('Type of codelist'),
                links: z
                  .array(
                    z.object({
                      rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
                      hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
                      href: z.string().describe('the link to the resource'),
                    }),
                  )
                  .describe('Links to associated information about the code list'),
              }),
            )
            .describe('Available codelists for this dimension')
            .optional(),
          measuringType: z
            .object({})
            .catchall(z.enum(['Stock', 'Flow', 'Average', 'Other']).default('Other').describe('Indicates if data is stock, flow or average.'))
            .describe('Indicates if data is stock, flow or average.')
            .optional(),
          priceType: z
            .object({})
            .catchall(z.enum(['NotApplicable', 'Current', 'Fixed']).describe('Indicates if data is in current or fixed prices.'))
            .describe('Indicates if data is in current or fixed prices.')
            .optional(),
          adjustment: z
            .object({})
            .catchall(
              z
                .enum(['None', 'SesOnly', 'WorkOnly', 'WorkAndSes'])
                .default('None')
                .describe(
                  'WorkOnly means that data is adjusted e.g. to take into account the number of working days. SesOnly means that data is seasonally adjusted.',
                ),
            )
            .describe('Describes adjustments made to the data')
            .optional(),
          basePeriod: z
            .object({})
            .catchall(
              z
                .string()
                .describe(
                  'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
                ),
            )
            .describe(
              'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
            )
            .optional(),
        })
        .describe('extension at dimension')
        .optional(),
      link: z
        .object({
          describedby: z
            .array(
              z.object({
                extension: z.object({}).catchall(z.string().describe('A string')).describe('A extension object').optional(),
              }),
            )
            .optional(),
        })
        .optional(),
    }),
  )
  .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#dimension)') as unknown as ToZod<Dimension>