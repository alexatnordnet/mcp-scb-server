/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { CodeListResponse } from '../types/CodeListResponse.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const codeListResponseSchema = z.object({
  id: z.string().describe('The identiyer for the codelist'),
  label: z.string().describe('The textual name  for the codelist.'),
  language: z.string().describe('The language code for the language used in this response'),
  languages: z.array(z.string()).describe('The languages that the codelist is available in'),
  elimination: z.boolean().default(false).describe('If the codelist is eliminatable'),
  eliminationValueCode: z
    .string()
    .describe('The value code that should be used for elimination. If not set the variable will be eliminated by summing up all values.')
    .optional(),
  type: z.enum(['Aggregation', 'Valueset']).describe('Type of codelist'),
  values: z.array(
    z.object({
      code: z.string().describe('The code for the value.'),
      label: z.string().describe('The textual representation for the value'),
      valueMap: z.array(z.string()).describe('An array of codes from the origial codelist for the variable that cand be mapped to this value'),
      notes: z
        .array(
          z.object({
            mandatory: z.boolean().default(false).describe('Must be shown to end user if true'),
            text: z.string(),
          }),
        )
        .describe('Optional notes that are associated with the value')
        .optional(),
    }),
  ),
  links: z.array(
    z.object({
      rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
      hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
      href: z.string().describe('the link to the resource'),
    }),
  ),
}) as unknown as ToZod<CodeListResponse>