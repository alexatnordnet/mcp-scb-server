/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetMetadataByIdPathParams,
  GetMetadataByIdQueryParams,
  GetMetadataById200,
  GetMetadataById400,
  GetMetadataById404,
  GetMetadataById429,
  GetMetadataByIdQueryResponse,
} from '../../types/tableController/GetMetadataById.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getMetadataByIdPathParamsSchema = z.object({
  id: z.string().describe('Id'),
}) as unknown as ToZod<GetMetadataByIdPathParams>

export const getMetadataByIdQueryParamsSchema = z.object({
  lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  defaultSelection: z
    .boolean()
    .default(false)
    .describe(
      'If metadata should be included as if default selection would have been applied.\nThis is a technical parameter that is used by PxWeb for initial loading of tables.\n',
    ),
  codelist: z.object({}).catchall(z.string()).optional(),
}) as unknown as ToZod<GetMetadataByIdQueryParams>

/**
 * @description Success
 */
export const getMetadataById200Schema = z
  .object({
    version: z.enum(['2.0']).default('2.0').describe('JSON-stat version 2.0'),
    class: z.enum(['dataset']).default('dataset').describe('Is always dataset'),
    href: z.string().url().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#href)').optional(),
    label: z.string().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#label)').optional(),
    source: z.string().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#source)').optional(),
    updated: z
      .string()
      .regex(/^((19|20)\d\d)\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/)
      .describe('See https://json-stat.org/full/#updated')
      .optional(),
    link: z
      .object({})
      .catchall(
        z.array(
          z.object({
            type: z.string().optional(),
            href: z.string().url().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#href)').optional(),
          }),
        ),
      )
      .optional(),
    note: z.array(z.string()).describe('Note for table').optional(),
    role: z
      .object({
        time: z
          .array(z.string())
          .refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' })
          .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#time)')
          .optional(),
        geo: z
          .array(z.string())
          .refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' })
          .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#geo)')
          .optional(),
        metric: z
          .array(z.string())
          .refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' })
          .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#metric)')
          .optional(),
      })
      .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#role)')
      .optional(),
    id: z
      .array(z.string())
      .refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' })
      .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#id)'),
    size: z.array(z.number().int()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#size)'),
    dimension: z
      .object({})
      .catchall(
        z.object({
          label: z.string().describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#label)').optional(),
          note: z.array(z.string()).describe('Notes for variable').optional(),
          category: z
            .object({
              index: z.object({}).catchall(z.number().int()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#index)').optional(),
              label: z.object({}).catchall(z.string()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#label)').optional(),
              note: z
                .object({})
                .catchall(z.array(z.string()).describe('Spesification on json-stat.org -> [here](https://json-stat.org/full/#note)'))
                .describe('Notes for values')
                .optional(),
              child: z
                .object({})
                .catchall(z.array(z.string()).refine((items) => new Set(items).size === items.length, { message: 'Array entries must be unique' }))
                .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#child)')
                .optional(),
              unit: z
                .object({})
                .catchall(
                  z.object({
                    base: z.string().describe('It is the base unit (person, gram, euro, etc.).').optional(),
                    decimals: z.number().int().describe('Number of decimals').optional(),
                  }),
                )
                .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#unit)')
                .optional(),
            })
            .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#category)')
            .optional(),
          extension: z
            .object({
              elimination: z.boolean().describe('Can dimension be elminated').optional(),
              eliminationValueCode: z.string().describe('Elimination value code').optional(),
              noteMandatory: z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.').optional(),
              categoryNoteMandatory: z
                .object({})
                .catchall(z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.'))
                .describe('Describes which value note are mandatory')
                .optional(),
              refperiod: z.object({}).catchall(z.string()).describe('Text with information on the exact period for the statistics').optional(),
              show: z.string().describe('Information about how variables are presented').optional(),
              codeLists: z
                .array(
                  z.object({
                    id: z.string().describe('The identity of the CodeList'),
                    label: z.string().describe('A textual name for the CodeList'),
                    type: z.enum(['Aggregation', 'Valueset']).describe('Type of codelist'),
                    links: z
                      .array(
                        z.object({
                          rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
                          hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
                          href: z.string().describe('the link to the resource'),
                        }),
                      )
                      .describe('Links to associated information about the code list'),
                  }),
                )
                .describe('Available codelists for this dimension')
                .optional(),
              measuringType: z
                .object({})
                .catchall(z.enum(['Stock', 'Flow', 'Average', 'Other']).default('Other').describe('Indicates if data is stock, flow or average.'))
                .describe('Indicates if data is stock, flow or average.')
                .optional(),
              priceType: z
                .object({})
                .catchall(z.enum(['NotApplicable', 'Current', 'Fixed']).describe('Indicates if data is in current or fixed prices.'))
                .describe('Indicates if data is in current or fixed prices.')
                .optional(),
              adjustment: z
                .object({})
                .catchall(
                  z
                    .enum(['None', 'SesOnly', 'WorkOnly', 'WorkAndSes'])
                    .default('None')
                    .describe(
                      'WorkOnly means that data is adjusted e.g. to take into account the number of working days. SesOnly means that data is seasonally adjusted.',
                    ),
                )
                .describe('Describes adjustments made to the data')
                .optional(),
              basePeriod: z
                .object({})
                .catchall(
                  z
                    .string()
                    .describe(
                      'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
                    ),
                )
                .describe(
                  'Base period for, for instance index series. Is shown with the footnote. If there is a contents variable the keyword is repeated for each value of the contents variable.',
                )
                .optional(),
            })
            .describe('extension at dimension')
            .optional(),
          link: z
            .object({
              describedby: z
                .array(
                  z.object({
                    extension: z.object({}).catchall(z.string().describe('A string')).describe('A extension object').optional(),
                  }),
                )
                .optional(),
            })
            .optional(),
        }),
      )
      .describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#dimension)'),
    extension: z
      .object({
        noteMandatory: z.object({}).catchall(z.boolean().default(true)).describe('Describes if a note of a certain index is mandatory.').optional(),
        px: z
          .object({
            infofile: z.string().describe('Name of a file containing more information for the statistics**').optional(),
            tableid: z.string().describe('A text that is the identity of the table').optional(),
            decimals: z.number().int().describe('The number of decimals in the table cells').optional(),
            'official-statistics': z.boolean().describe('Indicates if the data table is included in the official statistics of the organization').optional(),
            aggregallowed: z.boolean().describe('If the contents of the table cannot be aggregated').optional(),
            copyright: z.boolean().describe('If the table is protected by copyright').optional(),
            language: z.string().describe('code (two characters) for language').optional(),
            contents: z
              .string()
              .describe('Information about the contents, which makes up the first part of a title created when retrieving tables from PC-Axis.')
              .optional(),
            description: z
              .string()
              .describe('See _description_ in [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)')
              .optional(),
            descriptiondefault: z
              .boolean()
              .describe(
                'For some languages it is difficult to build a table title dynamically. The keyword descriptiondefault = True; means that the text after keyword Description will be used as title for the table',
              )
              .optional(),
            heading: z.array(z.string()).describe('List of suggested variables for table head').optional(),
            stub: z.array(z.string()).describe('List of suggested variables for table stub').optional(),
            matrix: z.string().describe('The name of the matrix').optional(),
            'subject-code': z.string().describe('Subject area code').optional(),
            'subject-area': z.string().describe('Subject area').optional(),
            nextUpdate: z
              .string()
              .regex(/^((19|20)\d\d)\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/)
              .describe('Date for next update')
              .optional(),
            survey: z.string().describe('Survey for table').optional(),
            link: z.string().describe('Links for tables').optional(),
            updateFrequency: z.string().describe('How often a table is updated').optional(),
          })
          .describe(
            'Properties corresponds to keywords in the px-file.\n\nSee [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)\n',
          )
          .optional(),
        firstPeriod: z.string().describe('Earliest time period in table').optional(),
        lastPeriod: z.string().describe('Latest time period in table').optional(),
        tags: z.array(z.string()).describe('Tag for table').optional(),
        discontinued: z.boolean().describe('If the table is discontinued or not. That is if it no longer updated with new figures.').nullable().nullish(),
        contact: z
          .array(
            z.object({
              name: z.string().optional(),
              organization: z.string().optional(),
              phone: z.string().optional(),
              mail: z.string().optional(),
              raw: z.string().describe('Raw contact information for compatability with PX files'),
            }),
          )
          .describe('A list of contacts associated with the table.')
          .optional(),
      })
      .describe('extension at root level')
      .optional(),
    value: z.array(z.number().nullable()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#value)').nullable(),
    status: z.object({}).catchall(z.string()).describe('Specification on json-stat.org -> [here](https://json-stat.org/full/#status)').optional(),
  })
  .describe(
    'Representation of TableMetaData/TableData according to JSON-stat 2.0 Dataset Schema (2018-09-05 10:55), see full specification of JSON-stat format [here](https://json-stat.org/full/)\n\nProperties in **extension** are mostly from PX-file format, see [PX file format](https://www.scb.se/en/services/statistical-programs-for-px-files/px-file-format/)\n',
  ) as unknown as ToZod<GetMetadataById200>

/**
 * @description Error response for 400
 */
export const getMetadataById400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetMetadataById400>

/**
 * @description Error response for 404
 */
export const getMetadataById404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetMetadataById404>

/**
 * @description Error response for 429
 */
export const getMetadataById429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetMetadataById429>

export const getMetadataByIdQueryResponseSchema = z.lazy(() => getMetadataById200Schema) as unknown as ToZod<GetMetadataByIdQueryResponse>