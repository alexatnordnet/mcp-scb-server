/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetTableDataByPostPathParams,
  GetTableDataByPostQueryParams,
  GetTableDataByPost200,
  GetTableDataByPost400,
  GetTableDataByPost403,
  GetTableDataByPost404,
  GetTableDataByPost429,
  GetTableDataByPostMutationRequest,
  GetTableDataByPostMutationResponse,
} from '../../types/tableController/GetTableDataByPost.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getTableDataByPostPathParamsSchema = z.object({
  id: z.string().describe('Id'),
}) as unknown as ToZod<GetTableDataByPostPathParams>

export const getTableDataByPostQueryParamsSchema = z
  .object({
    lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
    outputFormat: z.enum(['px', 'json-stat2', 'csv', 'xlsx', 'html', 'json-px', 'parquet']).optional(),
    outputFormatParams: z
      .array(
        z
          .enum(['UseCodes', 'UseTexts', 'UseCodesAndTexts', 'IncludeTitle', 'SeparatorTab', 'SeparatorSpace', 'SeparatorSemicolon'])
          .describe(
            'Parameters for the output format.\n* UseCodes: Can not be combined with UseTexts and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseTexts: Can not be combined with UsedCodes and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseCodesAndTexts: Can not be combined with UseCodess and UseTexts. And only applicable for csv, html and xlsx output format.\n* IncludeTitle: Only applicable for csv, html and xlsx output format.\n* SeparatorTab: Can not be combined with SeparatorSpace and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSpace: Can not be combined with SeparatorTab and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSemicolon: Can not be combined with SeparatorTab and SeparatorSpace. And only applicable for csv output format.\n',
          ),
      )
      .optional(),
  })
  .optional() as unknown as ToZod<GetTableDataByPostQueryParams>

/**
 * @description Success
 */
export const getTableDataByPost200Schema = z.string() as unknown as ToZod<GetTableDataByPost200>

/**
 * @description Error response for 400
 */
export const getTableDataByPost400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableDataByPost400>

/**
 * @description Error response for 403
 */
export const getTableDataByPost403Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableDataByPost403>

/**
 * @description Error response for 404
 */
export const getTableDataByPost404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableDataByPost404>

/**
 * @description Error response for 429
 */
export const getTableDataByPost429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableDataByPost429>

/**
 * @description A selection
 */
export const getTableDataByPostMutationRequestSchema = z.object({
  selection: z.array(
    z.object({
      variableCode: z.string().describe('The variable code.'),
      codeList: z.string().describe('The identifier of the codelist that should be applied').nullable().nullish(),
      valueCodes: z
        .array(z.string())
        .describe('An array of string that specifies wich values sould be selected. Either as value codes or value expressions')
        .optional(),
    }),
  ),
  placement: z
    .object({
      heading: z.array(z.string()).describe('List of variables that should be placed in the heading in the resulting data').optional(),
      stub: z.array(z.string()).describe('List of variables that should be placed in the stub in the resulting data').optional(),
    })
    .optional(),
}) as unknown as ToZod<GetTableDataByPostMutationRequest>

export const getTableDataByPostMutationResponseSchema = z.lazy(() => getTableDataByPost200Schema) as unknown as ToZod<GetTableDataByPostMutationResponse>