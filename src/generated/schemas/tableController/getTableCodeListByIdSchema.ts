/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetTableCodeListByIdPathParams,
  GetTableCodeListByIdQueryParams,
  GetTableCodeListById200,
  GetTableCodeListById400,
  GetTableCodeListById404,
  GetTableCodeListById429,
  GetTableCodeListByIdQueryResponse,
} from '../../types/tableController/GetTableCodeListById.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getTableCodeListByIdPathParamsSchema = z.object({
  id: z.string().describe('Id'),
}) as unknown as ToZod<GetTableCodeListByIdPathParams>

export const getTableCodeListByIdQueryParamsSchema = z
  .object({
    lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  })
  .optional() as unknown as ToZod<GetTableCodeListByIdQueryParams>

/**
 * @description Success
 */
export const getTableCodeListById200Schema = z.object({
  id: z.string().describe('The identiyer for the codelist'),
  label: z.string().describe('The textual name  for the codelist.'),
  language: z.string().describe('The language code for the language used in this response'),
  languages: z.array(z.string()).describe('The languages that the codelist is available in'),
  elimination: z.boolean().default(false).describe('If the codelist is eliminatable'),
  eliminationValueCode: z
    .string()
    .describe('The value code that should be used for elimination. If not set the variable will be eliminated by summing up all values.')
    .optional(),
  type: z.enum(['Aggregation', 'Valueset']).describe('Type of codelist'),
  values: z.array(
    z.object({
      code: z.string().describe('The code for the value.'),
      label: z.string().describe('The textual representation for the value'),
      valueMap: z.array(z.string()).describe('An array of codes from the origial codelist for the variable that cand be mapped to this value'),
      notes: z
        .array(
          z.object({
            mandatory: z.boolean().default(false).describe('Must be shown to end user if true'),
            text: z.string(),
          }),
        )
        .describe('Optional notes that are associated with the value')
        .optional(),
    }),
  ),
  links: z.array(
    z.object({
      rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
      hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
      href: z.string().describe('the link to the resource'),
    }),
  ),
}) as unknown as ToZod<GetTableCodeListById200>

/**
 * @description Error response for 400
 */
export const getTableCodeListById400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableCodeListById400>

/**
 * @description Error response for 404
 */
export const getTableCodeListById404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableCodeListById404>

/**
 * @description Error response for 429
 */
export const getTableCodeListById429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableCodeListById429>

export const getTableCodeListByIdQueryResponseSchema = z.lazy(() => getTableCodeListById200Schema) as unknown as ToZod<GetTableCodeListByIdQueryResponse>