/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetDefaultSelectionPathParams,
  GetDefaultSelectionQueryParams,
  GetDefaultSelection200,
  GetDefaultSelection400,
  GetDefaultSelection404,
  GetDefaultSelection429,
  GetDefaultSelectionQueryResponse,
} from '../../types/tableController/GetDefaultSelection.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getDefaultSelectionPathParamsSchema = z.object({
  id: z.string().describe('Id'),
}) as unknown as ToZod<GetDefaultSelectionPathParams>

export const getDefaultSelectionQueryParamsSchema = z
  .object({
    lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  })
  .optional() as unknown as ToZod<GetDefaultSelectionQueryParams>

/**
 * @description Success
 */
export const getDefaultSelection200Schema = z
  .object({
    selection: z.array(
      z.object({
        variableCode: z.string().describe('The variable code.'),
        codeList: z.string().describe('The identifier of the codelist that should be applied').nullable().nullish(),
        valueCodes: z
          .array(z.string())
          .describe('An array of string that specifies wich values sould be selected. Either as value codes or value expressions')
          .optional(),
      }),
    ),
    placement: z
      .object({
        heading: z.array(z.string()).describe('List of variables that should be placed in the heading in the resulting data').optional(),
        stub: z.array(z.string()).describe('List of variables that should be placed in the stub in the resulting data').optional(),
      })
      .optional(),
  })
  .and(
    z.object({
      language: z.string().describe('The language code for the language used in this response'),
      links: z.array(
        z.object({
          rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
          hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
          href: z.string().describe('the link to the resource'),
        }),
      ),
    }),
  ) as unknown as ToZod<GetDefaultSelection200>

/**
 * @description Error response for 400
 */
export const getDefaultSelection400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetDefaultSelection400>

/**
 * @description Error response for 404
 */
export const getDefaultSelection404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetDefaultSelection404>

/**
 * @description Error response for 429
 */
export const getDefaultSelection429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetDefaultSelection429>

export const getDefaultSelectionQueryResponseSchema = z.lazy(() => getDefaultSelection200Schema) as unknown as ToZod<GetDefaultSelectionQueryResponse>