/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type { ListAllTablesQueryParams, ListAllTables200, ListAllTablesQueryResponse } from '../../types/tableController/ListAllTables.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const listAllTablesQueryParamsSchema = z.object({
  lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  query: z.string().describe('Selects only tables that that matches a criteria which is specified by the search parameter.').optional(),
  pastDays: z.coerce
    .number()
    .int()
    .min(1)
    .describe(
      'Selects only tables that was updated from the time of execution going back number of days stated by the parameter pastDays. Valid values for past days are integers between 1 and ?',
    )
    .optional(),
  includeDiscontinued: z.boolean().default(false).describe('Decides if discontinued tables are included in response.'),
  pageNumber: z.coerce.number().int().default(1).describe('Pagination: Decides which page number to return'),
  pageSize: z.coerce.number().int().describe('Pagination: Decides how many tables per page').optional(),
}) as unknown as ToZod<ListAllTablesQueryParams>

/**
 * @description Success
 */
export const listAllTables200Schema = z.object({
  language: z.string().describe('The language code (ISO 639) for this response'),
  tables: z.array(
    z
      .object({
        type: z.enum(['Heading', 'FolderInformation', 'Table']).describe('One of Heading, Table or FolderInformation'),
        id: z.string(),
        label: z.string().describe('Display text').nullable(),
        description: z.string().describe('Longer text describing node.').nullable().nullish(),
        sortCode: z.string().describe('String for sorting the contents in folder').optional(),
      })
      .and(
        z.object({
          tags: z.array(z.string().describe('tag for table')).optional(),
          updated: z.string().datetime({ offset: true }).describe('Date and time when the figures in the table was last updated, in UTC time.').nullable(),
          firstPeriod: z.string().describe('First period').nullable(),
          lastPeriod: z.string().describe('Last period').nullable(),
          category: z
            .enum(['internal', 'public', 'private', 'section'])
            .default('public')
            .describe('Mostly for internal use. Which category table belongs to. internal, public, private or section.'),
          variableNames: z.array(z.string()).describe('List of varibles name'),
          discontinued: z.boolean().describe('If the table is discontinued or not. That is if it no longer updated with new figures.').nullable().nullish(),
          source: z.string().describe('The source of the table').optional(),
          timeUnit: z.enum(['Annual', 'Quarterly', 'Monthly', 'Weekly', 'Other']).describe('The time unit for the table').optional(),
          paths: z
            .array(
              z.array(
                z.object({
                  id: z.string().describe('The identity of the PathElement'),
                  label: z.string().describe('A textual name for the PathElement'),
                }),
              ),
            )
            .describe('The path to the table')
            .optional(),
          links: z
            .array(
              z.object({
                rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
                hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
                href: z.string().describe('the link to the resource'),
              }),
            )
            .describe('Links to ...')
            .nullable(),
        }),
      )
      .describe('Table item'),
  ),
  page: z.object({
    pageNumber: z.number().int().min(1).describe('The current page number.'),
    pageSize: z.number().int().min(1).describe('The maximal number of elements in a page'),
    totalElements: z.number().int().min(0).describe('the Total number of elements'),
    totalPages: z.number().int().min(1).describe('The total number of pages'),
    links: z
      .array(
        z.object({
          rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
          hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
          href: z.string().describe('the link to the resource'),
        }),
      )
      .optional(),
  }),
  links: z
    .array(
      z.object({
        rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
        hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
        href: z.string().describe('the link to the resource'),
      }),
    )
    .optional(),
}) as unknown as ToZod<ListAllTables200>

export const listAllTablesQueryResponseSchema = z.lazy(() => listAllTables200Schema) as unknown as ToZod<ListAllTablesQueryResponse>