/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  GetTableByIdPathParams,
  GetTableByIdQueryParams,
  GetTableById200,
  GetTableById400,
  GetTableById404,
  GetTableById429,
  GetTableByIdQueryResponse,
} from '../../types/tableController/GetTableById.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const getTableByIdPathParamsSchema = z.object({
  id: z.string().describe('Id'),
}) as unknown as ToZod<GetTableByIdPathParams>

export const getTableByIdQueryParamsSchema = z
  .object({
    lang: z.string().describe('The language if the default is not what you want.').nullable().nullish(),
  })
  .optional() as unknown as ToZod<GetTableByIdQueryParams>

/**
 * @description Success
 */
export const getTableById200Schema = z
  .object({
    type: z.enum(['Heading', 'FolderInformation', 'Table']).describe('One of Heading, Table or FolderInformation'),
    id: z.string(),
    label: z.string().describe('Display text').nullable(),
    description: z.string().describe('Longer text describing node.').nullable().nullish(),
    sortCode: z.string().describe('String for sorting the contents in folder').optional(),
  })
  .and(
    z.object({
      tags: z.array(z.string().describe('tag for table')).optional(),
      updated: z.string().datetime({ offset: true }).describe('Date and time when the figures in the table was last updated, in UTC time.').nullable(),
      firstPeriod: z.string().describe('First period').nullable(),
      lastPeriod: z.string().describe('Last period').nullable(),
      category: z
        .enum(['internal', 'public', 'private', 'section'])
        .default('public')
        .describe('Mostly for internal use. Which category table belongs to. internal, public, private or section.'),
      variableNames: z.array(z.string()).describe('List of varibles name'),
      discontinued: z.boolean().describe('If the table is discontinued or not. That is if it no longer updated with new figures.').nullable().nullish(),
      source: z.string().describe('The source of the table').optional(),
      timeUnit: z.enum(['Annual', 'Quarterly', 'Monthly', 'Weekly', 'Other']).describe('The time unit for the table').optional(),
      paths: z
        .array(
          z.array(
            z.object({
              id: z.string().describe('The identity of the PathElement'),
              label: z.string().describe('A textual name for the PathElement'),
            }),
          ),
        )
        .describe('The path to the table')
        .optional(),
      links: z
        .array(
          z.object({
            rel: z.string().describe('the link relation, see https://www.iana.org/assignments/link-relations/link-relations.xhtml'),
            hreflang: z.string().describe('The language that is used for the link, see https://moz.com/learn/seo/hreflang-tag'),
            href: z.string().describe('the link to the resource'),
          }),
        )
        .describe('Links to ...')
        .nullable(),
    }),
  )
  .and(
    z.object({
      language: z.string().describe('The language code (ISO 639) for this response'),
    }),
  ) as unknown as ToZod<GetTableById200>

/**
 * @description Error response for 400
 */
export const getTableById400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableById400>

/**
 * @description Error response for 404
 */
export const getTableById404Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableById404>

/**
 * @description Error response for 429
 */
export const getTableById429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<GetTableById429>

export const getTableByIdQueryResponseSchema = z.lazy(() => getTableById200Schema) as unknown as ToZod<GetTableByIdQueryResponse>