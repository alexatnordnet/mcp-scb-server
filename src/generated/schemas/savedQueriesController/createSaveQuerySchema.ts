/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import type {
  CreateSaveQuery201,
  CreateSaveQuery400,
  CreateSaveQuery429,
  CreateSaveQueryMutationRequest,
  CreateSaveQueryMutationResponse,
} from '../../types/savedQueriesController/CreateSaveQuery.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

/**
 * @description Saved query created
 */
export const createSaveQuery201Schema = z.object({
  id: z.string().describe('The id of the saved query').optional(),
  selection: z.object({
    selection: z.array(
      z.object({
        variableCode: z.string().describe('The variable code.'),
        codeList: z.string().describe('The identifier of the codelist that should be applied').nullable().nullish(),
        valueCodes: z
          .array(z.string())
          .describe('An array of string that specifies wich values sould be selected. Either as value codes or value expressions')
          .optional(),
      }),
    ),
    placement: z
      .object({
        heading: z.array(z.string()).describe('List of variables that should be placed in the heading in the resulting data').optional(),
        stub: z.array(z.string()).describe('List of variables that should be placed in the stub in the resulting data').optional(),
      })
      .optional(),
  }),
  language: z.string().describe('language code for the language used in this response'),
  tableId: z.string().describe('which table the query is for'),
  outputFormat: z.enum(['px', 'json-stat2', 'csv', 'xlsx', 'html', 'json-px', 'parquet']).optional(),
  outputFormatParams: z
    .array(
      z
        .enum(['UseCodes', 'UseTexts', 'UseCodesAndTexts', 'IncludeTitle', 'SeparatorTab', 'SeparatorSpace', 'SeparatorSemicolon'])
        .describe(
          'Parameters for the output format.\n* UseCodes: Can not be combined with UseTexts and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseTexts: Can not be combined with UsedCodes and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseCodesAndTexts: Can not be combined with UseCodess and UseTexts. And only applicable for csv, html and xlsx output format.\n* IncludeTitle: Only applicable for csv, html and xlsx output format.\n* SeparatorTab: Can not be combined with SeparatorSpace and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSpace: Can not be combined with SeparatorTab and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSemicolon: Can not be combined with SeparatorTab and SeparatorSpace. And only applicable for csv output format.\n',
        ),
    )
    .optional(),
}) as unknown as ToZod<CreateSaveQuery201>

/**
 * @description Error response for 400
 */
export const createSaveQuery400Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<CreateSaveQuery400>

/**
 * @description Error response for 429
 */
export const createSaveQuery429Schema = z.object({
  type: z
    .string()
    .url()
    .default('about:blank')
    .describe(
      'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
    ),
  title: z
    .string()
    .describe(
      'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
    )
    .optional(),
  status: z.number().int().min(100).max(600).describe('The HTTP status code generated by the origin server for this occurrence\nof the problem.\n').optional(),
  detail: z.string().describe('A human readable explanation specific to this occurrence of the\nproblem.\n').optional(),
  instance: z
    .string()
    .url()
    .describe('An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n')
    .optional(),
}) as unknown as ToZod<CreateSaveQuery429>

/**
 * @description A saved query
 */
export const createSaveQueryMutationRequestSchema = z.object({
  id: z.string().describe('The id of the saved query').optional(),
  selection: z.object({
    selection: z.array(
      z.object({
        variableCode: z.string().describe('The variable code.'),
        codeList: z.string().describe('The identifier of the codelist that should be applied').nullable().nullish(),
        valueCodes: z
          .array(z.string())
          .describe('An array of string that specifies wich values sould be selected. Either as value codes or value expressions')
          .optional(),
      }),
    ),
    placement: z
      .object({
        heading: z.array(z.string()).describe('List of variables that should be placed in the heading in the resulting data').optional(),
        stub: z.array(z.string()).describe('List of variables that should be placed in the stub in the resulting data').optional(),
      })
      .optional(),
  }),
  language: z.string().describe('language code for the language used in this response'),
  tableId: z.string().describe('which table the query is for'),
  outputFormat: z.enum(['px', 'json-stat2', 'csv', 'xlsx', 'html', 'json-px', 'parquet']).optional(),
  outputFormatParams: z
    .array(
      z
        .enum(['UseCodes', 'UseTexts', 'UseCodesAndTexts', 'IncludeTitle', 'SeparatorTab', 'SeparatorSpace', 'SeparatorSemicolon'])
        .describe(
          'Parameters for the output format.\n* UseCodes: Can not be combined with UseTexts and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseTexts: Can not be combined with UsedCodes and UseCodesAndTexts. And only applicable for csv, html and xlsx output format.\n* UseCodesAndTexts: Can not be combined with UseCodess and UseTexts. And only applicable for csv, html and xlsx output format.\n* IncludeTitle: Only applicable for csv, html and xlsx output format.\n* SeparatorTab: Can not be combined with SeparatorSpace and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSpace: Can not be combined with SeparatorTab and SeparatorSemicolon. And only applicable for csv output format.\n* SeparatorSemicolon: Can not be combined with SeparatorTab and SeparatorSpace. And only applicable for csv output format.\n',
        ),
    )
    .optional(),
}) as unknown as ToZod<CreateSaveQueryMutationRequest>

export const createSaveQueryMutationResponseSchema = z.lazy(() => createSaveQuery201Schema) as unknown as ToZod<CreateSaveQueryMutationResponse>