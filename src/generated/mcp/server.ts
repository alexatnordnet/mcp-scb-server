/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { px_get_api_configuration_handler } from './configurationRequests/getApiConfiguration.ts'
import { px_get_navigation_by_id_handler } from './navigationRequests/getNavigationById.ts'
import { px_get_navigation_root_handler } from './navigationRequests/getNavigationRoot.ts'
import { px_get_default_selection_handler } from './tableRequests/getDefaultSelection.ts'
import { px_get_metadata_by_id_handler } from './tableRequests/getMetadataById.ts'
import { px_get_table_by_id_handler } from './tableRequests/getTableById.ts'
import { px_get_table_code_px_list_by_id_handler } from './tableRequests/getTableCodeListById.ts'
import { px_get_table_data_handler } from './tableRequests/getTableData.ts'
import { px_get_table_data_by_post_handler } from './tableRequests/getTableDataByPost.ts'
import { px_list_all_tables_handler } from './tableRequests/listAllTables.ts'
import { getNavigationByIdPathParamsSchema, getNavigationByIdQueryParamsSchema } from '../schemas/navigationController/getNavigationByIdSchema.ts'
import { getNavigationRootQueryParamsSchema } from '../schemas/navigationController/getNavigationRootSchema.ts'
import { getDefaultSelectionPathParamsSchema, getDefaultSelectionQueryParamsSchema } from '../schemas/tableController/getDefaultSelectionSchema.ts'
import { getMetadataByIdPathParamsSchema, getMetadataByIdQueryParamsSchema } from '../schemas/tableController/getMetadataByIdSchema.ts'
import { getTableByIdPathParamsSchema, getTableByIdQueryParamsSchema } from '../schemas/tableController/getTableByIdSchema.ts'
import { getTableCodeListByIdPathParamsSchema, getTableCodeListByIdQueryParamsSchema } from '../schemas/tableController/getTableCodeListByIdSchema.ts'
import {
  getTableDataByPostMutationRequestSchema,
  getTableDataByPostPathParamsSchema,
  getTableDataByPostQueryParamsSchema,
} from '../schemas/tableController/getTableDataByPostSchema.ts'
import { getTableDataPathParamsSchema, getTableDataQueryParamsSchema } from '../schemas/tableController/getTableDataSchema.ts'
import { listAllTablesQueryParamsSchema } from '../schemas/tableController/listAllTablesSchema.ts'
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp'
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio'

export const server = new McpServer({
  name: 'PxApi',
  version: '3.0.2',
})

server.tool('GetNavigationRoot', 'Make a GET request to /navigation', { params: getNavigationRootQueryParamsSchema }, async ({ params }) => {
  return px_get_navigation_root_handler({ params })
})

server.tool(
  'GetNavigationById',
  'Make a GET request to /navigation/{id}',
  { id: getNavigationByIdPathParamsSchema.shape['id'], params: getNavigationByIdQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_navigation_by_id_handler({ id, params })
  },
)

server.tool('ListAllTables', 'Make a GET request to /tables', { params: listAllTablesQueryParamsSchema }, async ({ params }) => {
  return px_list_all_tables_handler({ params })
})

server.tool(
  'GetTableById',
  'Make a GET request to /tables/{id}',
  { id: getTableByIdPathParamsSchema.shape['id'], params: getTableByIdQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_table_by_id_handler({ id, params })
  },
)

server.tool(
  'GetMetadataById',
  '**Used for listing detailed information about a specific table**\n* List all variables and values and all other metadata needed to be able to fetch data\n\n* Also links to where to:\n  + Fetch\n  - Where to get information about codelists\n\n* 2 output formats\n  + Custom json\n  - JSON-stat2\n',
  { id: getMetadataByIdPathParamsSchema.shape['id'], params: getMetadataByIdQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_metadata_by_id_handler({ id, params })
  },
)

server.tool(
  'GetDefaultSelection',
  'Get information about what is selected for the table by default when no selection is made i the /data endpoint.',
  { id: getDefaultSelectionPathParamsSchema.shape['id'], params: getDefaultSelectionQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_default_selection_handler({ id, params })
  },
)

server.tool(
  'GetTableCodeListById',
  'Make a GET request to /codelists/{id}',
  { id: getTableCodeListByIdPathParamsSchema.shape['id'], params: getTableCodeListByIdQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_table_code_px_list_by_id_handler({ id, params })
  },
)

server.tool(
  'GetTableData',
  'Make a GET request to /tables/{id}/data',
  { id: getTableDataPathParamsSchema.shape['id'], params: getTableDataQueryParamsSchema },
  async ({ id, params }) => {
    return px_get_table_data_handler({ id, params })
  },
)

server.tool(
  'GetTableDataByPost',
  'Make a POST request to /tables/{id}/data',
  { id: getTableDataByPostPathParamsSchema.shape['id'], data: getTableDataByPostMutationRequestSchema, params: getTableDataByPostQueryParamsSchema },
  async ({ id, data, params }) => {
    return px_get_table_data_by_post_handler({ id, data, params })
  },
)

server.tool('GetApiConfiguration', 'Make a GET request to /config', async () => {
  return px_get_api_configuration_handler()
})

async function startServer() {
  try {
    const transport = new StdioServerTransport()
    await server.connect(transport)
  } catch (error) {
    console.error('Failed to start server:', error)
    process.exit(1)
  }
}

startServer()